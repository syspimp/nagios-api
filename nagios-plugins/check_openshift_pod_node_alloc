#!/bin/bash

set -e -u -o pipefail

. /usr/lib/nagios-plugins-openshift/utils

default_namespace=default

usage() {
  echo "Usage: $0 -f <path> [-n <namespace>] [-s <selector>]"
  echo
  echo 'Check whether all pods matching given selector are running'\
    'on disparate nodes'
  echo
  echo 'Options:'
  echo ' -f   Config file path'
  echo " -n   Namespace (default: \"$default_namespace\")"
  echo ' -s   Selector for pods, e.g. "deploymentconfig=router"'
}

opt_cfgfile=
opt_namespace=$default_namespace
opt_selector=

while getopts 'hf:n:s:w:c:' opt; do
  case "$opt" in
    h)
      usage
      exit 0
      ;;
    f) opt_cfgfile="$OPTARG" ;;
    n) opt_namespace="$OPTARG" ;;
    s) opt_selector="$OPTARG" ;;
    *)
      usage >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND - 1))

if [[ "$#" -gt 0 ]]; then
  usage >&2
  exit 1
fi

if [[ -z "$opt_cfgfile" ]]; then
  usage >&2
  exit 1
fi

tmpdir=$(mktemp -d)
trap 'rm -rf "$tmpdir"' EXIT

# Capture stderr in variable and redirect stdout to file
# shellcheck disable=SC2069
if ! msg=$(run_oc "$opt_cfgfile" get pod \
             --output=json \
             --namespace="$opt_namespace" \
             --selector="$opt_selector" \
             2>&1 >"$tmpdir/pod.json"); then
  echo "$msg"
  exit "$state_critical"
fi

jq -r '
  (
    .items |
    map(select((.status.conditions // [])[] | select(.type == "Ready") | .status == "True"))
  ) as $pods |
  (
    @sh "node_name= total_pod_count=\($pods | length)",
    (
      $pods | group_by(.spec.nodeName)[] |
      @sh "node_name=\(.[0].spec.nodeName) pod_names=( \(map(.metadata.name) | sort) )"
    )
  )
' < "$tmpdir/pod.json" > "$tmpdir/pod.txt"

exit_status="$state_ok"
output=()
limit=

while read line; do
  eval "$line"

  if [[ -z "${node_name:-}" ]]; then
    # Line with information for all pods

    # Calculate limit to complain if >50% are on single node
    (( limit=((total_pod_count + 1) / 2) ))

    # Apply arbitrary upper limit
    if (( limit > 3 )); then
      limit=3
    fi

    continue
  fi

  pod_count="${#pod_names[*]}"

  if (( pod_count > limit )); then
    output+=( "${pod_count} of ${total_pod_count} instances running on ${node_name} (${pod_names[*]})" )
    exit_status=$(merge_status "$exit_status" "$state_critical")
  fi
done < "$tmpdir/pod.txt"

finish "$exit_status" \
  "$(join_args ', ' ${output[@]+"${output[@]}"})" \
  ''

# vim: set sw=2 sts=2 et :
