#!/bin/bash

set -e -u -o pipefail

. /usr/lib/nagios-plugins-openshift/utils

usage() {
  echo "Usage: $0 -f <path> -n <node>"
  echo
  echo 'Check node conditions. Checked are:'
  echo ' - Ready'
  echo ' - DiskPressure'
  echo ' - MemoryPressure'
  echo ' - OutOfDisk'
  echo
  echo 'Options:'
  echo ' -f   Config file path'
  echo ' -n   Node name'
}

opt_cfgfile=
opt_name=

while getopts 'hf:n:' opt; do
  case "$opt" in
    h)
      usage
      exit 0
      ;;
    f) opt_cfgfile="$OPTARG" ;;
    n) opt_name="$OPTARG" ;;
    *)
      usage >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND - 1))

if [[ "$#" -gt 0 ]]; then
  usage >&2
  exit 1
fi

if [[ -z "$opt_cfgfile" || -z "$opt_name" ]]; then
  usage >&2
  exit 1
fi

tmpdir=$(mktemp -d)
trap 'rm -rf "$tmpdir"' EXIT

# Capture stderr in variable and redirect stdout to file
# shellcheck disable=SC2069
if ! msg=$(run_oc "$opt_cfgfile" get --output=json node "$opt_name" 2>&1 >"$tmpdir/node.json"); then
  echo "$msg"
  exit "$state_critical"
fi

exit_status=$state_ok
output=()

get_condition() {
  local name="$1"

  jq -r "(.status.conditions // [])[] | select(.type == \"$name\") | [.status, .message] | @sh"
}

check_condition() {
  local cond="$1"
  local expected="$2"
  local values

  if values=$(get_condition "$cond" < "$tmpdir/node.json"); then
    eval "set -- $values"

    local status_lc="${1,,*}"
    local msg="$2"

    if [[ "$status_lc" != "$expected" ]]; then
      output+=( "condition \"$cond\": $msg" )
      exit_status=$(merge_status "$exit_status" "$state_critical")
    fi
  else
    output+=( "missing \"$cond\" condition" )
    exit_status=$(merge_status "$exit_status" "$state_critical")
  fi
}

# Important: Keep usage description synchronized with the list of conditions!
check_condition Ready true
check_condition DiskPressure false
check_condition MemoryPressure false

# Get Kubernetes version
get_kube_ver

# Depending on the Kubernetes version include additional Node info
if [[ ${kube_major_ver} -ge 1 ]]; then
  if [[ ${kube_minor_ver} -le 11 ]]; then
    # OpenShift 3.x used up to Kubernetes 1.11
    check_condition OutOfDisk false
  elif [[ ${kube_minor_ver} -ge 12 ]]; then
    # OpenShift 4.x starts at Kubernetes 1.12
    check_condition PIDPressure false
  fi
fi

finish "$exit_status" \
  "$(join_args ', ' ${output[@]+"${output[@]}"})" \
  ''

# vim: set sw=2 sts=2 et :
