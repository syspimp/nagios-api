#!/bin/bash

set -e -u -o pipefail

. /usr/lib/nagios-plugins-openshift/utils

default_namespace=default

usage() {
  echo "Usage: $0 -f <path> [-n <namespace>] [-s <selector>]"
  echo
  echo 'Check whether all schedulable nodes in a cluster have an instance of'\
    'Fluentd running.'
  echo
  echo 'Options:'
  echo ' -f   Config file path'
  echo " -n   Namespace (default: \"$default_namespace\")"
  echo ' -s   Selector for Fluentd pods, e.g. "component=fluentd"'
}

opt_cfgfile=
opt_namespace=$default_namespace
opt_selector=

while getopts 'hf:n:s:w:c:' opt; do
  case "$opt" in
    h)
      usage
      exit 0
      ;;
    f) opt_cfgfile="$OPTARG" ;;
    n) opt_namespace="$OPTARG" ;;
    s) opt_selector="$OPTARG" ;;
    *)
      usage >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND - 1))

if [[ "$#" -gt 0 ]]; then
  usage >&2
  exit 1
fi

if [[ -z "$opt_cfgfile" ]]; then
  usage >&2
  exit 1
fi

tmpdir=$(mktemp -d)
trap 'rm -rf "$tmpdir"' EXIT

# Capture stderr in variable and redirect stdout to file
# shellcheck disable=SC2069
if ! msg=$(run_oc "$opt_cfgfile" get pod \
             --output=json \
             --namespace="$opt_namespace" \
             --selector="$opt_selector" \
             2>&1 >"$tmpdir/pod.json"); then
  echo "$msg"
  exit "$state_critical"
fi

# shellcheck disable=SC2069
if ! msg=$(run_oc "$opt_cfgfile" get node \
             --output=json \
             --all-namespaces \
             2>&1 >"$tmpdir/node.json"); then
  echo "$msg"
  exit "$state_critical"
fi

# Data structure documentation:
# https://godoc.org/k8s.io/kubernetes/pkg/api/v1>
jq -r '.items[].metadata.name | @text' \
  < "$tmpdir/node.json" > "$tmpdir/node.txt"

filter_pods() {
  local node="$1"

  jq -r "
    .items[] |
    select(.spec.nodeName == \"${node//\"}\") |
    select((.status.conditions // [])[] | select(.type == \"Ready\") | .status == \"True\") |
    .metadata.name
  "
}

exit_status="$state_ok"
output=()

while read node; do
  readarray -t pods < <(filter_pods "$node" < "$tmpdir/pod.json")

  if [[ "${#pods[@]}" -eq 1 ]]; then
    # Fluentd running
    :
  elif [[ "${#pods[@]}" -gt 1 ]]; then
    output+=( "two or more instances running on $node (${pods[*]})" )
    exit_status=$(merge_status "$exit_status" "$state_critical")
  else
    output+=( "not running on $node" )
    exit_status=$(merge_status "$exit_status" "$state_critical")
  fi
done < "$tmpdir/node.txt"

finish "$exit_status" \
  "$(join_args ', ' ${output[@]+"${output[@]}"})" \
  ''

# vim: set sw=2 sts=2 et :
